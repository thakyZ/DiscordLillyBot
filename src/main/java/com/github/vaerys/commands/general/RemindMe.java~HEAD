package com.github.vaerys.commands.general;

<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/general/RemindMe.java~HEAD
import com.github.vaerys.commands.CommandObject;
import com.github.vaerys.handlers.EventHandler;
import com.github.vaerys.interfaces.Command;
import com.github.vaerys.main.Utility;
=======
import com.github.vaerys.enums.ChannelSetting;
import com.github.vaerys.enums.SAILType;
import com.github.vaerys.handlers.StringHandler;
import com.github.vaerys.handlers.TimerHandler;
import com.github.vaerys.main.Globals;
import com.github.vaerys.main.Utility;
import com.github.vaerys.masterobjects.CommandObject;
import com.github.vaerys.templates.Command;
>>>>>>> master:src/main/java/com/github/vaerys/commands/general/RemindMe.java
import sx.blah.discord.handle.obj.Permissions;

import java.time.ZoneOffset;
import java.time.ZonedDateTime;

/**
 * Created by Vaerys on 30/01/2017.
 */
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/general/RemindMe.java~HEAD
public class RemindMe implements Command {
    @Override
    public String execute(String args, CommandObject command) {
        String timeString = args.split(" ")[0];
        try {
            long timeMins = Long.parseLong(timeString);
            if (timeMins < 1) {
                return "> Time can not be less than or equal to 0";
            }
            if (timeMins > 60 * 24 * 365) {
                return "> What are you doing... that reminder is set for over a year from now... you cant do that.";
            }
            ZonedDateTime now = ZonedDateTime.now(ZoneOffset.UTC);
            now = now.plusMinutes(timeMins);
            StringBuilder builder = new StringBuilder(args);
            builder.delete(0, (timeMins + "").length());
            if (EventHandler.addReminder(command.user.stringID, command.channel.stringID, now.toEpochSecond(), builder.toString())) {
                return "> Reminder set for " + timeString + " Minute(s) from now.";
            } else {
                return "> You already have a reminder set.";
            }
        } catch (NumberFormatException e) {
            return "> Error Trying to set reminder.\n" +
                    Utility.getCommandInfo(this, command);
=======
public class RemindMe extends Command {

    @Override
    public String execute(String args, CommandObject command) {
        StringHandler contents = new StringHandler(args);
        long timeSecs = Utility.getRepeatTimeValue(contents);
        if (timeSecs == -1) {
            return "> Could not find a valid time value.\n" +
                    missingArgs(command);
>>>>>>> master:src/main/java/com/github/vaerys/commands/general/RemindMe.java
        }
    }

    @Override
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/general/RemindMe.java~HEAD
    public String[] names() {
        return new String[]{"RemindMe"};
=======
    protected String[] names() {
        return new String[]{"RemindMe", "Reminder"};
>>>>>>> master:src/main/java/com/github/vaerys/commands/general/RemindMe.java
    }

    @Override
    public String description() {
        return "Sets a Reminder for yourself, Limit 1 per user.";
    }

    @Override
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/general/RemindMe.java~HEAD
    public String usage() {
        return "[Time Minutes] [Reminder Message]";
=======
    protected String usage() {
        return "[Time...] [Reminder Message]";
>>>>>>> master:src/main/java/com/github/vaerys/commands/general/RemindMe.java
    }

    @Override
    protected SAILType type() {
        return SAILType.GENERAL;
    }

    @Override
    protected ChannelSetting channel() {
        return null;
    }

    @Override
    protected Permissions[] perms() {
        return new Permissions[0];
    }

    @Override
    protected boolean requiresArgs() {
        return true;
    }

    @Override
    protected boolean doAdminLogging() {
        return false;
    }

    @Override
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/general/RemindMe.java~HEAD
    public String dualDescription() {
        return null;
    }

    @Override
    public String dualUsage() {
        return null;
    }

    @Override
    public String dualType() {
        return null;
    }

    @Override
    public Permissions[] dualPerms() {
        return new Permissions[0];
=======
    public void init() {

>>>>>>> master:src/main/java/com/github/vaerys/commands/general/RemindMe.java
    }
}
