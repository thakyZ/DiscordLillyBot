package com.github.vaerys.commands.servers;

<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/servers/Server.java~HEAD
import com.github.vaerys.commands.CommandObject;
import com.github.vaerys.interfaces.Command;
import com.github.vaerys.main.Utility;
=======
import com.github.vaerys.enums.ChannelSetting;
import com.github.vaerys.enums.SAILType;
import com.github.vaerys.masterobjects.CommandObject;
>>>>>>> master:src/main/java/com/github/vaerys/commands/servers/Server.java
import com.github.vaerys.objects.ServerObject;
import sx.blah.discord.handle.obj.Permissions;

/**
 * Created by Vaerys on 31/01/2017.
 */
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/servers/Server.java~HEAD
public class Server implements Command {
=======
public class Server extends Command {

>>>>>>> master:src/main/java/com/github/vaerys/commands/servers/Server.java
    @Override
    public String execute(String args, CommandObject command) {
        for (ServerObject s : command.guild.servers.getServers()) {
            if (s.getName().equalsIgnoreCase(args)) {
                StringBuilder builder = new StringBuilder();
                builder.append("**" + s.getName() + "**\n");
                builder.append("**IP:** " + s.getServerIP() + " **Port:** " + s.getServerPort() + "\n");
                builder.append("**Listing Creator:** " + command.guild.get().getUserByID(s.getCreatorID()).getDisplayName(command.guild.get()) + "\n");
                builder.append(s.getServerDesc());
                Utility.sendDM(builder.toString(), command.user.longID);
                return "> Server info has been sent to your DMs";
            }
        }
        return "> Server with that name not found.";
    }

    @Override
    protected String[] names() {
        return new String[]{"Server"};
    }

    @Override
    public String description() {
        return "Lists the information about a specific server.";
    }

    @Override
    protected String usage() {
        return "[Server Name]";
    }

    @Override
    protected SAILType type() {
        return SAILType.SERVERS;
    }

    @Override
    protected ChannelSetting channel() {
        return ChannelSetting.SERVERS;
    }

    @Override
    protected Permissions[] perms() {
        return new Permissions[0];
    }

    @Override
    protected boolean requiresArgs() {
        return true;
    }

    @Override
    protected boolean doAdminLogging() {
        return false;
    }

    @Override
<<<<<<< HEAD:src/main/java/com/github/vaerys/commands/servers/Server.java~HEAD
    public String dualDescription() {
        return null;
    }

    @Override
    public String dualUsage() {
        return null;
    }

    @Override
    public String dualType() {
        return null;
    }

    @Override
    public Permissions[] dualPerms() {
        return new Permissions[0];
=======
    public void init() {

>>>>>>> master:src/main/java/com/github/vaerys/commands/servers/Server.java
    }
}
